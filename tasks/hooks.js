 /*
 * grunt-hooks
 * https://github.com/keith/grunt-hooks
 *
 * Description: SCM Hook management
 * Dependencies: path, fs, underscore
 * Copyright (c) 2012 Keith Cirkel
 * Licensed under the MIT license.
 */

module.exports = function(grunt) {

  var version = '0.1.0',
      signature = '#GRUNTHOOK:',
      path = require('path'),
      fs = require('fs'),
      supportedSCMs = ['git']; //['git', 'svn', 'hg'];

  // ==========================================================================
  // TASKS
  // ==========================================================================

  grunt.registerTask('hooks', 'Your task description goes here.', function(task) {
    var config = grunt.config('hooks'),
        hooks = grunt.utils._.keys(config),
        done = this.async();

    // If we aren't given an argument, run hooks:init followed by all commit hooks
    if (arguments.length === 0) {
      hooks.unshift('init');
      hooks = hooks.map(function (a) { return 'hooks:' + a; });
      
      grunt.task.run(hooks.join(' '));

    // Run the hook name if provided
    } else if (task !== 'init') {

      if (config[task]) {
        grunt.task.run(config[task]);
      } else {
        grunt.warn('Task "hook:' + task + '" not found.');
      }

    // The main bulk of this task: building hooks! (init)
    } else {
      var scm = grunt.helper('hooks-scm-config') || { type: 'git', path: '.git' };

      hooks.forEach(grunt.helper.bind(grunt, 'write-' + scm.type + '-hook', scm.path));
    }

    return done();
  });

  // ==========================================================================
  // HELPERS
  // ==========================================================================

  // Find out what type of source control management we have, by looking for the dot-folder
  grunt.registerHelper('hooks-scm-config', function() {
    var cfg;

    grunt.utils._.any(supportedSCMs, function (f) {
      var path = grunt.file.findup(process.cwd(), '.' + f);
      if (path) {
        cfg = { type: f, path: path };
        return true;
      }
    });

    return cfg;
  });

  // Git hooks exist in the .git/hooks/ dir as executable files of the name of the hook.
  // http://git-scm.com/book/ch7-3.html
  grunt.registerHelper('write-git-hook', function(scmDir, hookName) {
    var ver,
        hook = path.join(scmDir, 'hooks', hookName);

    // If the file already exists, then deal with it accordingly.
    if (path.existsSync(hook)) {
      // Ensure perms are correct for file.
      fs.chmodSync(hook, '755');

      // Is it a grunt commit hook that already exists, with the same version, then return early.
      ver = String(grunt.file.read(hook).split('\n')[1]).match(signature + '([\\d.]+)');
      if (ver && ver[1] === version) {
        return;
      // It's not a grunt commit hook, so move it to "<hookName>-old"
      } else if (!ver) {
        fs.renameSync(hook, hook + '-old');
      }
    }

    // Write the hook.
    grunt.file.write(hook,
      '#!/bin/sh\n' +
      signature + version + '# - Automatically generated by Grunt, do not edit!\n' +
      'grunt hooks:' + hookName + '; exit=$?\n' +
      'if [[ "${exit}" -ne "0" ]]; then exit $exit; fi;\n' +
      'find . -name "' + hookName + '-*" -type f -perm +100 | while read HOOK; do \n' +
      '  $HOOK; exit=$?\n' +
      '  if [[ "${exit}" -ne "0" ]]; then exit $exit; fi;\n' +
      'done\n' +
      'exit 0'
    );

    fs.chmodSync(hook, '755');

    grunt.log.writeln('Wrote hook ' + hook.green);
  });

  // Hg hooks exist at [hooks] ini config inside .hg/hgrc
  // http://hgbook.red-bean.com/read/handling-repository-events-with-hooks.html#sec:hook:simple
  grunt.registerHelper('write-hg-hook', function(scmDir, hookName) {
    grunt.fatal('Sorry, Mercurial hooks are not yet supported!');
  });

};